from pydantic import BaseModel
from typing import Optional, List # Import List

# Base schema for a task (used for creating/updating)
class TaskBase(BaseModel):
    title: str
    description: Optional[str] = None # Optional field
    completed: bool = False

# Schema for creating a task (inherits from TaskBase)
class TaskCreate(TaskBase):
    pass

# Schema for reading a task (includes the 'id' and enables ORM mode)
class Task(TaskBase):
    id: int # Task ID, generated by the database
    user_id: int # Include user_id when reading tasks

    class Config:
        orm_mode = True # Enables Pydantic to read data directly from SQLAlchemy models (ORM objects)

# Base schema for a user
class UserBase(BaseModel):
    username: str

# Schema for creating a user (includes password)
class UserCreate(UserBase):
    password: str # Password for registration

# Schema for reading a user (includes 'id' and enables ORM mode)
class User(UserBase):
    id: int
    tasks: List[Task] = [] # Include tasks when reading a user

    class Config:
        orm_mode = True

# Schema for JWT token response
class Token(BaseModel):
    access_token: str
    token_type: str

# Schema for data contained within the JWT token payload
class TokenData(BaseModel):
    username: Optional[str] = None # Username from the token
